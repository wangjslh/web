<!-- 
	scan:
	当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
	scanPeriod:
	设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
	debug:
	当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

	<!-- 尽量别用绝对路径，如果带参数不同容器路径解释可能不同 -->
	<property name="LOG_HOME" value="logs/" />
	<appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{H:mm} %-5level [%logger{16}] %msg%n</pattern>
		</encoder>
	</appender>

	<!-- 按照每天生成日志文件 -->
	<appender name="FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<FileNamePattern>${LOG_HOME}/mina.%d{yyyy-MM-dd}.log
			</FileNamePattern>
			<MaxHistory>30</MaxHistory>
		</rollingPolicy>
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n
			</pattern>
		</layout>
	</appender>

	<!-- 
		用来设置某一个包或者具体的某一个类的日志打印级别，包名要与实际项目一致；
		下面的配置将级别为“DEBUG”及大于“DEBUG”的日志信息传递给root处理;
		说明：子<logger>向<root>传递信息后，日志level完全由子级别的level控制
		根据上面是说明，个人理解下面的配置没有价值，即实现项目当中不需要<logger></logger>形式的配置，
		应该形如<logger />的配置。那么下面的配置实际项目当中可配置形如
		<logger name="test" level="debug" additivity="true">，最终打印信息由root处理
	 -->
	<logger name="test" level="info" additivity="false"><!-- additivity="true" -->
		<appender-ref ref="Console" />
		<appender-ref ref="FILE" />
	</logger>
	<!-- <logger name="test" level="info" additivity="true"> -->
	<!-- 
		root将级别为“debug”及大于“debug”的日志信息交给已经配置好的名为“Console”的appender处理，
		“Console”appender将信息打印到Console；标识这个appender将会添加到这个logger 
	-->
	<root level="debug"> 
		<appender-ref ref="Console" />
		<appender-ref ref="FILE" />
	</root>
</configuration>